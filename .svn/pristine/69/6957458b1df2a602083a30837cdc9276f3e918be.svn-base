// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ManPowerWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using ManPowerWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using ManPowerWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using ManPowerCore.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using ManPowerCore.Domain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\_Imports.razor"
using ManPowerCore.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\Pages\AddSpecialProgram.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/addSpecialTarget")]
    public partial class AddSpecialProgram : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 257 "D:\SLIIT\Intern bellwantage\ManPower New Copy\ManPower new\ManPowerWeb\Pages\AddSpecialProgram.razor"
       

    string[] year = { "2022", "2023" };

    List<Month> monthTable = new List<Month>();

    string[] arrVote = { "328-02-01-02-2509", "428-02-01-02-2509", "528-02-01-02-2509", "628-02-01-02-2509" };





    private bool isChecked = false;
    private int selectedDistrict;
    private int selectedDSDivision;
    private int selectedProgramID;
    private string selectedProgram;
    private int selectedDesignation;
    private int selectedOfficer;
    private int month;
    private int depUnitPId;

    private string selectedYear;
    private int programType;
    private string pInstruct = "";
    private string vote = "";
    private string description = "";

    private int phyCount;
    private float finCount;

    private string output;
    private string outcome;

    private DateTime sDate = DateTime.Now;
    private DateTime eDate = DateTime.Now;

    List<DepartmentUnit> listDistrict = new List<DepartmentUnit>();
    List<DepartmentUnit> listDSDivision = new List<DepartmentUnit>();
    List<Designation> listDesignation = new List<Designation>();
    List<ProgramType> listProgramType = new List<ProgramType>();
    List<DepartmentUnitPositions> listUser = new List<DepartmentUnitPositions>();
    List<SystemUser> listUsers = new List<SystemUser>();
    List<ManPowerCore.Domain.Program> program = new List<ManPowerCore.Domain.Program>();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        monthTable.Add(new Month() { monthName = "January", monthNumber = 1 });
        monthTable.Add(new Month() { monthName = "February", monthNumber = 2 });
        monthTable.Add(new Month() { monthName = "March", monthNumber = 3 });
        monthTable.Add(new Month() { monthName = "April", monthNumber = 4 });
        monthTable.Add(new Month() { monthName = "May", monthNumber = 5 });
        monthTable.Add(new Month() { monthName = "June", monthNumber = 6 });
        monthTable.Add(new Month() { monthName = "July", monthNumber = 7 });
        monthTable.Add(new Month() { monthName = "August", monthNumber = 8 });
        monthTable.Add(new Month() { monthName = "September", monthNumber = 9 });
        monthTable.Add(new Month() { monthName = "October", monthNumber = 10 });
        monthTable.Add(new Month() { monthName = "November", monthNumber = 11 });
        monthTable.Add(new Month() { monthName = "December", monthNumber = 12 });

        DepartmentUnitTypeController _DepartmentUnitTypeController = ControllerFactory.CreateDepartmentUnitTypeController();
        listDistrict = _DepartmentUnitTypeController.GetDepartmentUnitType(2, true)._DepartmentUnit;
        listDSDivision = _DepartmentUnitTypeController.GetDepartmentUnitType(3, true)._DepartmentUnit;

        DesignationController designationController = ControllerFactory.CreateDesignationController();
        listDesignation = designationController.GetAllDesignation(true, false);

        SystemUserController systemUserController = ControllerFactory.CreateSystemUserController();
        listUsers = systemUserController.GetAllSystemUser(true, false, false);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        listProgramType = programTypeController.GetAllProgramType(false);

        DepartmentUnitPositionsController unitPositionsController = ControllerFactory.CreateDepartmentUnitPositionsController();
        listUser = unitPositionsController.GetAllDepartmentUnitPositions(false, false, true, false, true);

        ProgramController programController = ControllerFactory.CreateProgramController();
        program = programController.GetAllProgram(false);


    }

    private async void onClick_Save()
    {
        if (selectedDSDivision == 0 || selectedDistrict == 0 || selectedDesignation == 0 ||
            selectedYear == string.Empty || selectedYear == null || phyCount == 0 || finCount == 0 ||

            pInstruct == string.Empty || pInstruct == null ||
            vote == string.Empty || vote == null ||
            description == string.Empty || description == null ||

            output == string.Empty || output == null ||
            outcome == string.Empty || outcome == null)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the required data");

        }
        else
        {

            ProgramTarget programTarget = new ProgramTarget();
            ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();

            ProgramAssignee programAssignee = new ProgramAssignee();
            ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();

            programTarget.ProgramTypeId = programType;
            programTarget.ProgramId = selectedProgramID;
            programTarget.Title = selectedProgram;
            programTarget.Description = description;
            programTarget.Instractions = pInstruct;
            programTarget.StartDate = sDate;
            programTarget.EndDate = eDate;
            programTarget.VoteNumber = vote;
            programTarget.NoOfProjects = phyCount;
            programTarget.EstimatedAmount = finCount;
            programTarget.TargetYear = int.Parse(selectedYear);
            programTarget.TargetMonth = month;
            programTarget.Output = int.Parse(output);
            programTarget.Outcome = int.Parse(outcome);
            programTarget.IsRecommended = 0;
            programTarget.RecommendedBy = "";
            programTarget.RecommendedDate = DateTime.Now;

            programTarget._ProgramAssignee.Add(new ProgramAssignee()
                {
                    DesignationId = selectedDesignation,
                    ProgramAssigneeId = selectedOfficer,
                    DepartmentUnitPossitionsId = depUnitPId,
                });

            int TargetResponse = programTargetController.SaveProgramTarget(programTarget);

            if (TargetResponse != 0)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong");
            }
        }
    }


    private async void onClick_add()
    {
        if (
            phyCount == 0 || finCount == 0)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the required data");

        }
        //else if (CountValidate(phyCount, finCount) == false)
        //{
        //    await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please add valid counts for 'Physical and Financial Counts'..");
        //}
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "successfully added");

        }
    }

    //private List<string> add(string quater, string phy, string fin)
    //{
    //    var retList = new List<string>();
    //    retList.Add(quater);
    //    retList.Add(phy);
    //    retList.Add(fin);

    //    return retList;
    //}


    private bool CountValidate(string phyCount, string finCount)
    {
        Regex count = new Regex("[0-9]");
        if (count.IsMatch(phyCount) && count.IsMatch(finCount))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //private void onClick_clear()
    //{
    //    selectedOfficerName = "";
    //    selectedYear = "";
    //    selectedDesignatin = "";
    //    month = "";

    //    targetCategory = "";
    //    program = "";
    //    pInstruct = "";
    //    vote = "";
    //    description = "";

    //    phyCount = 0;
    //    finCount = 0;

    //    output = "";
    //    outcome = "";
    //}



    //-------------- Date Picker hander --------------------//

    DateTime value1 = DateTime.Now;
    DateTime value2 = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value1 = DateTime.Now;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591

@page "/planning/1/addnewtarget"
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@using Radzen
@using System.Text.Json


<div id="main">
    <RadzenTemplateForm TItem="ProgramTarget" Data=@programTarget Submit="OnSubmit" InvalidSubmit="OnInvalidSubmit">
        <RadzenCard Style="padding-left:45px;">
            <div class="wizard-heading" style="align-content:center;">Add New Target</div>
            <div class="row">
                <div class="col-6">
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Year" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Placeholder="" Data="@year" Name="year"
                                    SelectedItem="selectedYear" @bind-Value="selectedYear" Style="display: block" />
                            <RadzenRequiredValidator Component="year" Text="Year is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="District" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="display: block;margin-bottom:3px;" Name="d" SelectedItem="selectedDistrict"
                                            Data="@listDistrict" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDistrict" />
                            <RadzenRequiredValidator Component="d" Text="District is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Designation" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@listDesignation" Style="display: block" SelectedItem="selectedDesignation"
                                            ValueProperty="DesignationId" TextProperty="DesigntionName" @bind-Value="selectedDesignation" Name="desig" />
                            <RadzenRequiredValidator Component="desig" Text="Designation is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />
                    
                </div>

                @*----------------------------*@
                <div class="col-6">

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Target" />
                        </div>
                        <div class="col-7">
                            <RadzenRadioButtonList Orientation="Orientation.Horizontal" @bind-Value=@radioSelection TValue="int" Style="display: block">
                                <Items>
                                    <RadzenRadioButtonListItem Text="District level" Value="1" TValue="int" />
                                    <RadzenRadioButtonListItem Text="DS Devision level" Value="2" TValue="int" />
                                </Items>
                            </RadzenRadioButtonList>
                        </div>
                    </div>

                    <br />

                    @foreach(var i in listUsers.Where(u => u.SystemUserId == selectedOfficer))
                    {
                        OfficerName = i.Name;
                    }

                    @if(radioSelection == 1)
                    {
                        <div class="row">
                            <div class="col-4">
                                <RadzenLabel Text="DS Division" />
                            </div>
                            <div class="col-7">
                                <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="display: block" Name="Division" Disabled />
                            </div>
                        </div>
                        <br/>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-4">
                                <RadzenLabel Text="DS Division" />
                            </div>
                            <div class="col-7">
                                <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="display: block" Name="Division"
                                            Data="@listDSDivision.Where(u => u.ParentId == selectedDistrict)" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDSDivision" />
                                <RadzenRequiredValidator Component="Division" Text="Division is required" Style="position: absolute" />
                            </div>
                        </div>
                        <br />
                    }

                    @if(radioSelection == 1)
                    {
                         <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Officer Name" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown Style="display: block" AllowClear="true" TValue="int" Class="w-100" Data="@listUser.Where(u => u.DepartmentUnitId == selectedDistrict)"
                                            ValueProperty="SystemUserId" TextProperty="_SystemUser.Name" @bind-Value="selectedOfficer" Name="Officer" />
                            <RadzenRequiredValidator Component="Officer" Text="OfficerName is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                        @foreach (var prop in listUser.Where(u => u.DepartmentUnitId == selectedDistrict))
                        {
                            depUnitPId = @prop.DepartmetUnitPossitionsId;
                        }
                    }
                    else
                    {
                        <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Officer Name" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown Style="display: block" AllowClear="true" TValue="int" Class="w-100" Data="@listUser.Where(u => u.DepartmentUnitId == selectedDSDivision)"
                                            ValueProperty="SystemUserId" TextProperty="_SystemUser.Name" @bind-Value="selectedOfficer" Name="Officer" />
                            <RadzenRequiredValidator Component="Officer" Text="OfficerName is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />
                        @foreach (var prop in listUser.Where(u => u.DepartmentUnitId == selectedDSDivision))
                        {
                            depUnitPId = @prop.DepartmetUnitPossitionsId;
                        }

                    }

                   

                </div>
            </div>

            
        <br /><br />


        @*-------------------------- end of asignee details ------------------------*@


            <div class="row">
                <div class="col-6">
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Program Type" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown Style="display: block" AllowClear="true" TValue="int" Class="w-100" Name="t" Data="@listProgramType"
                                            ValueProperty="ProgramTypeId" TextProperty="ProgramTypeName" @bind-Value="programType"/>
                            <RadzenRequiredValidator Component="t" Text="Program Type is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Program" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Name="program1" Data="@program"
                                            ValueProperty="ProgramId" TextProperty="ProgramName" @bind-Value="selectedProgramID" Style="display: block" />
                            <RadzenRequiredValidator Component="program1" Text="Program is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    @foreach (var prop in program.Where(u => u.ProgramId == selectedProgramID))
                    {
                        selectedProgram = prop.ProgramName;
                    }


                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Start Date" />
                        </div>
                        <div class="col-7">
                            <RadzenDatePicker Name="s" @bind-Value="sDate" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="display: block" />
                            <RadzenRequiredValidator Component="s" Text="Start Date is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="End Date" />
                        </div>
                        <div class="col-7">
                            <RadzenDatePicker @bind-Value="eDate" Name="e" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="display: block" />
                            <RadzenRequiredValidator Component="e" Text="End Date is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                </div>

                @*----------------------------*@
                <div class="col-6">
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Instructions" />
                        </div>
                        <div class="col-7">
                            <RadzenTextArea @bind-Value="pInstruct" Class="w-100" Style="display: block" Name="Instructions" />
                            <RadzenRequiredValidator Component="Instructions" Text="Instruction is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Description" />
                        </div>
                        <div class="col-7">
                            <RadzenTextArea @bind-Value="description" Class="w-100" Style="display: block" Name="Description" />
                            <RadzenRequiredValidator Component="Description" Text="Description is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Vote" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Name="v" Data="@arrVote" @bind-Value="vote" Style="display: block" />
                            <RadzenRequiredValidator Component="v" Text="Vote is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />

                    

                </div>
            </div>
            <br/>

            
                <div class="row">
                    <div class="col-6">
                        <h4 style="font-weight:bold;">Target: physical / financial : </h4><br />
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Month" />
                        </div>
                        <div class="col-7">
                            <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@monthTable" Name="m"
                                            ValueProperty="monthNumber" TextProperty="monthName" @bind-Value="month" Style="display: block" />
                            <RadzenRequiredValidator Component="m" Text="Month is required" Style="position: absolute" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Physical Count" />
                        </div>
                        <div class="col-7">
                            <RadzenTextBox @bind-Value="phyCount" Class="w-100" Style="display: block" Name="count1" />
                            <RadzenRequiredValidator Component="count1" Text="Physical Count is required" Style="position: absolute" />
                            <RadzenRegexValidator Component="count1" Text="Physical Count must be numeric" Pattern="\d[0-9]" Style="position: absolute" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <RadzenLabel Text="Financial Count" />
                        </div>
                        <div class="col-7">
                            <RadzenTextBox @bind-Value="finCount" Class="w-100" Style="display: block" Name="finCount" />
                            <RadzenRequiredValidator Component="finCount" Text="Financial Count is required" Style="position: absolute" />
                            <RadzenRegexValidator Component="finCount" Text="Financial Count must be numeric" Pattern="[+-]?([0-9]*[.])?[0-9]+" Style="position: absolute" />
                        </div>
                    </div>
                    </div>
                </div>

                <br />

                <br /><br />

                <div class="row">
                <div class="col-6">
                    <h4 style="font-weight:bold;">Expected Output :  </h4><br />
                        <div class="row">
                            <div class="col-4">
                                <RadzenLabel Text="Output" />
                            </div>
                            <div class="col-7">
                                <RadzenTextBox @bind-Value="output" Class="w-100" Style="display: block" Name="output" />
                                <RadzenRequiredValidator Component="output" Text="Output is required" Style="position: absolute" />
                                <RadzenRegexValidator Component="output" Text="Output must be a numeric value" Pattern="\d[0-9]"  Style="position: absolute" />
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-4">
                                <RadzenLabel Text="Outcome" />
                            </div>
                            <div class="col-7">
                                <RadzenTextBox @bind-Value="outcome" Class="w-100" Style="display: block" Name="outcome" />
                                <RadzenRequiredValidator Component="outcome" Text="Outcome or Remarks is required" Style="position: absolute" />
                                <RadzenRegexValidator Component="outcome" Text="Outcome must be a numeric value" Pattern="\d[0-9]"  Style="position: absolute" />
                            </div>
                        </div>
                        <br />

                        <div class="row">
                            <div class="col-4">
                                <RadzenLabel Text="Remarks" />
                            </div>
                            <div class="col-7">
                                <RadzenTextArea Class="w-100" Style="display: block" Name="r" />
                            </div>
                        </div>
                        <br />
                        <br/>

                    </div>
                </div>

                @*Click=@(args => DialogService.Confirm("Are you sure you want to save this ?", "Conformation", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }))*@

            <div class="row">
                <div class="col-2">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Darker" Style="width:130px;" 
                    ></RadzenButton>
                </div>
                <div class="col-2">
                    <RadzenButton ButtonType="ButtonType.Reset" Text="Clear" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Darker" Style="width:130px;"></RadzenButton>
                </div>
                @if (isClicked == true)
                {
                    <input onclick="document.getElementById('id02').style.display='block'" type="button" class="rdzn-btn" value="Send to Recommondation" style="width:230px;" />
                }
                else
                {
                    <RadzenButton Shade="Shade.Darker" Text="Send to Recommondatin" ButtonStyle="ButtonStyle.Secondary" Style="width:230px;" Disabled />
                }
            </div>
            <br />

        </RadzenCard>

    </RadzenTemplateForm>

        @*---------------- Dialog box -----------------------*@

        <div class="w3-container">
            
            <div id="id01" class="w3-modal">
                <div class="w3-modal-content w3-card-4 w3-animate-zoom" style="max-width:40%;">

                    <div class="w3-center">
                        <br>
                        <span onclick="document.getElementById('id01').style.display='none'" class="w3-button w3-xlarge w3-display-topright" title="Close Modal">&times;</span>
                        <h2>Recommondation</h2>
                    </div>

                    <form class="w3-container" action="/action_page.php" style="padding:70px">
                        <div class="w3-section" >
                            <label><b>Recommondation Type</b></label>
                            <select class="form-select" aria-label="Default select example" required>
                                <option selected>Open this select menu</option>
                                <option value="1">Send to recommondation</option>
                                <option value="2">Send to approval</option>
                            </select>

                            <br/><br/>

                            <label><b>Officer Name</b></label>
                            <select class="form-select" aria-label="Default select example" required>
                                <option selected>Open this select menu</option>
                                <option value="1">Mr. R Fernando</option>
                                <option value="2">Mrs. A Abhesinghe</option>
                            </select>
                        </div>
                    </form>

                    <div class="w3-container w3-border-top w3-padding-16 w3-light-grey">
                        <div class="row justify-content-evenly">
                            <div class="col-4">
                                <input onclick="document.getElementById('id01').style.display='none'" type="button" class="red-btn" value="Cancel"  style="width:160px;" />
                            </div>
                            <div class="col-4">
                                <input onclick="document.getElementById('id01').style.display='none'" type="button" class="blue-btn" value="Send" style="width:160px;" />
                            </div>
                        </div>
                   </div>

                </div>
            </div>
        </div>

        @*---------------------------------------*@

</div>





@code {

    string[] year = {"2022","2023" };

    List<Month> monthTable = new List<Month>();

    string[] arrVote = { "328-02-01-02-2509", "428-02-01-02-2509", "528-02-01-02-2509", "628-02-01-02-2509" };

    string[] user;



    private bool isClicked = false;
    private int selectedDistrict;
    private int selectedDSDivision;
    private int selectedProgramID;
    private string selectedProgram;
    private int selectedDesignation;
    private int selectedOfficer;
    private string OfficerName;
    private int month;
    private int depUnitPId;
    private int radioSelection;


    private string selectedYear;
    private int programType;
    private string pInstruct = "";
    private string vote = "";
    private string description = "";

    private string phyCount;
    private string finCount;

    private string output;
    private string outcome;

    private DateTime sDate = DateTime.Now;
    private DateTime eDate = DateTime.Now;
    string message = "Insert Success";
    int TargetResponse = 0;

    ProgramTarget programTarget = new ProgramTarget();
    List<ProgramTarget> searchTarget = new List<ProgramTarget>();
    ProgramAssignee programAssignee = new ProgramAssignee();
    List<DepartmentUnit> listDistrict = new List<DepartmentUnit>();
    List<DepartmentUnit> listDSDivision = new List<DepartmentUnit>();
    List<Designation> listDesignation = new List<Designation>();
    List<ProgramType> listProgramType = new List<ProgramType>();
    List<DepartmentUnitPositions> listUser = new List<DepartmentUnitPositions>();
    List<SystemUser> listUsers = new List<SystemUser>();
    List<ProgramTarget> allTargets = new List<ProgramTarget>();
    List<ManPowerCore.Domain.Program> program = new List<ManPowerCore.Domain.Program>();



    protected override void OnInitialized()
    {
        base.OnInitialized();

        monthTable.Add(new Month() { monthName = "January", monthNumber = 1 });
        monthTable.Add(new Month() { monthName = "February", monthNumber = 2 });
        monthTable.Add(new Month() { monthName = "March", monthNumber = 3 });
        monthTable.Add(new Month() { monthName = "April", monthNumber = 4 });
        monthTable.Add(new Month() { monthName = "May", monthNumber = 5 });
        monthTable.Add(new Month() { monthName = "June", monthNumber = 6 });
        monthTable.Add(new Month() { monthName = "July", monthNumber = 7 });
        monthTable.Add(new Month() { monthName = "August", monthNumber = 8 });
        monthTable.Add(new Month() { monthName = "September", monthNumber = 9 });
        monthTable.Add(new Month() { monthName = "October", monthNumber = 10 });
        monthTable.Add(new Month() { monthName = "November", monthNumber = 11 });
        monthTable.Add(new Month() { monthName = "December", monthNumber = 12 });

        DepartmentUnitTypeController _DepartmentUnitTypeController = ControllerFactory.CreateDepartmentUnitTypeController();
        listDistrict = _DepartmentUnitTypeController.GetDepartmentUnitType(2, true)._DepartmentUnit;
        listDSDivision = _DepartmentUnitTypeController.GetDepartmentUnitType(3, true)._DepartmentUnit;

        DesignationController designationController = ControllerFactory.CreateDesignationController();
        listDesignation = designationController.GetAllDesignation(true, false);

        SystemUserController systemUserController = ControllerFactory.CreateSystemUserController();
        listUsers = systemUserController.GetAllSystemUser(true, false, false);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        listProgramType = programTypeController.GetAllProgramType(false);

        DepartmentUnitPositionsController unitPositionsController = ControllerFactory.CreateDepartmentUnitPositionsController();
        listUser = unitPositionsController.GetAllDepartmentUnitPositions(false, false, true, false,true);

        ProgramController programController = ControllerFactory.CreateProgramController();
        program = programController.GetAllProgram(false);

        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        allTargets = programTargetController.GetAllProgramTarget(false, false, false,false);

    }

    void search(int year, int month)
    {
        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        searchTarget = programTargetController.GetAllProgramTarget(year, month,false,false,true,false);

    }





    //----------------------------- validator ------------------------------//

    void OnSubmit(ProgramTarget programTarget)
    {
        isClicked = true;
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(programTarget, new JsonSerializerOptions() { WriteIndented = true })}");
        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();

        programTarget.ProgramTypeId = programType;
        programTarget.ProgramId = selectedProgramID;
        programTarget.Title = selectedProgram;
        programTarget.Description = description;
        programTarget.Instractions = pInstruct;
        programTarget.StartDate = sDate;
        programTarget.EndDate = eDate;
        programTarget.VoteNumber = vote;
        programTarget.NoOfProjects = int.Parse(phyCount);
        programTarget.EstimatedAmount = float.Parse(finCount);
        programTarget.TargetYear = int.Parse(selectedYear);
        programTarget.TargetMonth = month;
        programTarget.Output = int.Parse(output);
        programTarget.Outcome = int.Parse(outcome);
        programTarget.IsRecommended = 0;
        programTarget.RecommendedBy = "";
        programTarget.RecommendedDate = DateTime.Now;

        programTarget._ProgramAssignee.Add(new ProgramAssignee()
            {
                DesignationId = selectedDesignation,
                ProgramAssigneeId = selectedOfficer, 
                DepartmentUnitPossitionsId = depUnitPId,
            });

        TargetResponse = programTargetController.SaveProgramTarget(programTarget);


        if (TargetResponse != 0)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success");
            programTarget = new ProgramTarget();
            NavigationManager.NavigateTo("https://localhost:44326/planning/annualTargets");
        }
        else
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong");
            programTarget = new ProgramTarget();
        }

        //if (TargetResponse != 0)
        //{
        //    //ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 4000 });
        //    JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success", "https://localhost:44326/addDme21");
        //}
        //else
        //{
        //    JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong" , "");
        //}
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async void onClick_send()
    {

        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();

        foreach (var prop in allTargets.Where(u => u.IsRecommended == 0 && u.ProgramTargetId == TargetResponse))
        {
            programTargetController.UpdateProgramTargetApproval(prop.ProgramTargetId, 1);
        }

        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Sent to Approval..");

    }



    //-------------- Date Picker hander --------------------//

    DateTime value1 = DateTime.Now;
    DateTime value2 = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value1 = DateTime.Now;
    }


}



@*private async void onClick_Save()
    {
        if (selectedDSDivision == 0 || selectedDistrict == 0 || selectedDesignation == 0 ||
            selectedYear == string.Empty || selectedYear == null || phyCount == string.Empty ||  phyCount == null || 
            finCount == string.Empty ||  finCount == null || 

            pInstruct == string.Empty || pInstruct == null ||
            vote == string.Empty || vote == null ||
            description == string.Empty || description == null ||

            output == string.Empty || output == null ||
            outcome == string.Empty || outcome == null)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the required data", "https://localhost:44326/addDme21");

        }
        else
        {

            ProgramTarget programTarget = new ProgramTarget();
            ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();

            ProgramAssignee programAssignee = new ProgramAssignee();
            ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();

            programTarget.ProgramTypeId = programType;
            programTarget.ProgramId = selectedProgramID;
            programTarget.Title = selectedProgram;
            programTarget.Description = description;
            programTarget.Instractions = pInstruct;
            programTarget.StartDate = sDate;
            programTarget.EndDate = eDate;
            programTarget.VoteNumber = vote;
            programTarget.NoOfProjects = int.Parse(phyCount);
            programTarget.EstimatedAmount = float.Parse(finCount);
            programTarget.TargetYear = int.Parse(selectedYear);
            programTarget.TargetMonth = month;
            programTarget.Output = int.Parse(output);
            programTarget.Outcome = int.Parse(outcome);
            programTarget.IsRecommended = 0;
            programTarget.RecommendedBy = "";
            programTarget.RecommendedDate = DateTime.Now;

            programTarget._ProgramAssignee.Add(new ProgramAssignee()
            {
                DesignationId = selectedDesignation,
                ProgramAssigneeId = selectedOfficer, 
                DepartmentUnitPossitionsId = depUnitPId,
            });

            int TargetResponse = programTargetController.SaveProgramTarget(programTarget);

            if (TargetResponse != 0)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong");
            }
        }
    }*@



            @*<div id="main">
         <RadzenCard>
        <div class="wizard-heading" style="align-content:center;">Add New Target</div>
            <div class="row">
                <div class="col-5" style="margin-right:100px;">
                <RadzenLabel Text="Year" />
                     <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Placeholder="" Data="@year" Name="year"
                     SelectedItem="selectedYear" @bind-Value="selectedYear" Style="margin-bottom:10px;font-size:0.9em;" /><br />
                     <RadzenRequiredValidator Component="year" Text="Year is required" Style="position: absolute" />
                               
                <label class="label">District</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="margin-bottom:10px;font-size:0.9em;"
                                    Data="@listDistrict" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDistrict">
                    </RadzenDropDown>


                <label class="label">Designation</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@listDesignation" Style="margin-bottom:10px;font-size:0.9em;"
                                ValueProperty="DesignationId"  TextProperty="DesigntionName" @bind-Value="selectedDesignation"/> <br />

                    

                </div>

                <div class="col-5">
                <label class="label">Month</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@monthTable"
                                    ValueProperty="monthNumber" TextProperty="monthName" @bind-Value="month" Style="margin-bottom:10px;font-size:0.9em;" />

                <label class="label">DS Division</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="margin-bottom:10px;font-size:0.9em;"
                                    Data="@listDSDivision.Where(u => u.ParentId == selectedDistrict)" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDSDivision" /> <br />

                <label class="label">Officer Name</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Data="@listUser.Where(u => u.DepartmentUnitId == selectedDistrict && u._SystemUser.DesignationId == selectedDesignation)"
                                    ValueProperty="SystemUserId" TextProperty="_SystemUser.Name" @bind-Value="selectedOfficer" Placeholder="" /><br /> <br />

                </div>
            </div>
         </RadzenCard>

         @foreach(var prop in listUser.Where(u => u.SystemUserId == selectedDistrict))
         {
            depUnitPId = prop.ParentId;
         }

        <br /><br />

         <RadzenCard>
            <div class="row">
                <div class="col-5" style="margin-right:100px;">

                     <label class="label">Program Type</label>
                     <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@listProgramType"
                                    ValueProperty="ProgramTypeId" TextProperty="ProgramTypeName" @bind-Value="programType" Style="margin-bottom:10px;font-size:0.9em;" />

                    <label class="label">Program</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@program"
                                    ValueProperty="ProgramId" TextProperty="ProgramName" @bind-Value="selectedProgramID" Style="margin-bottom:10px;font-size:0.9em;" />
                   
                                    
                    @foreach (var prop in program.Where(u => u.ProgramId == selectedProgramID))
                    {
                        selectedProgram = prop.ProgramName;
                    }

                    
                    <label class="label">Vote</label>
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Placeholder="" Data="@arrVote"
                                    SelectedItem="vote" @bind-Value="vote" Style="margin-bottom:10px;font-size:0.9em;" />

                </div>


                <div class="col-5">
                    <RadzenDatePicker @bind-Value="value" Placeholder="End Date.." DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:20px;" />

                    <label class="label">Instructions</label>
                    <RadzenTextArea @bind-Value="pInstruct" Class="w-100" Style="margin-bottom:10px;font-size:0.9em;"></RadzenTextArea>

                    <br/>

                    <label class="label">Description</label>
                    <RadzenTextArea @bind-Value="description" Class="w-100" Style="margin-bottom:10px;font-size:0.9em;"></RadzenTextArea>

                    <RadzenDatePicker @bind-Value="sDate" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:10px;" />

                    <RadzenDatePicker @bind-Value="eDate" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:10px;" />

                </div>
            </div>
         </RadzenCard>

            <br /><br />


            <RadzenCard>
                <div class="row">
                    <div class="col-5">
                        <h5>c : </h5><br />

                        <label class="label">Output</label>
                        <RadzenTextBox  Class="w-100" Placeholder="Output.."  @bind-Value="output" Style="margin-bottom:10px;font-size:0.9em;" />

                        <label class="label">Outcome</label>
                        <RadzenTextBox  Class="w-100" Placeholder="Outcome.." @bind-Value="outcome" Style="margin-bottom:10px;font-size:0.9em;" />
                    </div>
                </div>
            </RadzenCard>
            <br /><br />

        <div class="row">
            <div class="col-5">

                <div class="form-holder form-holder-2">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" ButtonStyle="ButtonStyle.Info" Shade="Shade.Darker" Style="width:130px;"></RadzenButton>
                </div>
                <br />

                <div class="form-holder form-holder-2">
                        <input type="button" class="primary-btn" value="Send to Recommondation" style="width:250px;" onclick="document.getElementById('id01').style.display='block'" />
                </div>
                <br />

                <div class="form-holder form-holder-2">
                    <input type="button" class="primary-btn" value="Clear"/>
                </div>
                <br />

            </div>
        </div>*@
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ManPowerWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using ManPowerWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using ManPowerWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using ManPowerCore.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using ManPowerCore.Domain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\_Imports.razor"
using ManPowerCore.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\Pages\DME22.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\Pages\DME22.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\Pages\DME22.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/addDme22")]
    public partial class DME22 : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 478 "D:\SLIIT\Intern bellwantage\Man Power 2\ManPowerWeb\Pages\DME22.razor"
       
    string[] selection = { "YES" ,"NO" };

    private int workType;
    private int pId;
    private string pName;
    private string place;
    private string remarks;
    private string amendments;
    private int radioSelection;
    private string duty;
    private bool isClicked = false;
    private bool edit = false;
    private int count = 0;
    private int id;
    private DateTime yearMonth = DateTime.Today;
    private DateTime created = DateTime.Today;
    private DateTime selectedMonth;

    private string emptyText = "No Items to display!";

    //private List<DME21Model> dme = new List<DME21Model> ();

    List<ManPowerCore.Domain.Program> programObj = new List<ManPowerCore.Domain.Program>();
    List<ProgramType> programTypes = new List<ProgramType>();
    List<TaskType> taskTypes = new List<TaskType>();
    List<TaskAllocationDetail> taskAllocationDetails = new List<TaskAllocationDetail>();
    TaskAllocationDetail single = new TaskAllocationDetail();
    List<TaskAllocation> taskAllocations = new List<TaskAllocation>();
    List<TaskAllocation> approval = new List<TaskAllocation>();
    List<TaskAllocationDetail> myList = new List<TaskAllocationDetail>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ProgramController programController = ControllerFactory.CreateProgramController();
        programObj = programController.GetAllProgram(true);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        programTypes = programTypeController.GetAllProgramType(false);

        TaskTypeController taskTypeController = ControllerFactory.CreateTaskTypeController();
        taskTypes = taskTypeController.GetAllTaskType(false);

        TaskAllocationDetailController aa = ControllerFactory.CreateTaskAllocationDetailController();
        taskAllocationDetails = aa.GetAllTaskAllocationDetail(false, false, false);

        TaskAllocationController taskAllocationController = ControllerFactory.CreateTaskAllocationController();
        taskAllocations = taskAllocationController.GetAllTaskAllocation(true, true, true, true);

        foreach (var j in taskAllocations.Where(u => u.StatusId == 1))
        {
            foreach (var i in taskAllocationDetails.Where(u => u.TaskAllocationId == j.TaskAllocationId))
            {
                myList.Add(i);
            }
        }
    }


    //----------------------------- validator ------------------------------
    bool popup;

    TaskAllocation taskAllocation = new TaskAllocation();

    void OnSubmit(TaskAllocation taskAllocation)
    {
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(taskAllocation, new JsonSerializerOptions() { WriteIndented = true })}");

        TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();

        taskAllocation.DepartmetUnitPossitionsId = 4;
        taskAllocation.TaskYearMonth = value;
        taskAllocation.CreatedDate = created;
        taskAllocation.CreatedUser = "";
        taskAllocation.StatusId = 1;
        taskAllocation.RecommendedBy = "";
        taskAllocation.RecommendedDate = DateTime.Today;
        taskAllocation.ApprovedBy = "";
        taskAllocation.ApprovedDate = "";

        taskAllocation._TaskAllocationDetail.Add(new TaskAllocationDetail()
            {
                TaskTypeId = workType,
                TaskDescription = duty,
                WorkLocation = place,
                Isconmpleated = 0,
                NotCompleatedReason = "",
                StartTime = value,
                EndTime = DateTime.Today,
                TaskRemarks = remarks,
                TaskAmendments = amendments
            });

        int result = allocation.SaveTaskAllocation(taskAllocation);

        if (result == 1)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully added to the list");
            NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);
        }
        else
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Something went wrong");
            NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    //async void onClick_add()
    //{
    //    TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();
    //    TaskAllocation taskAllocation = new TaskAllocation();

    //    taskAllocation.DepartmetUnitPossitionsId = 4;
    //    taskAllocation.TaskYearMonth = value;
    //    taskAllocation.CreatedDate = created;
    //    taskAllocation.CreatedUser = "";
    //    taskAllocation.StatusId = 1;
    //    taskAllocation.RecommendedBy = "";
    //    taskAllocation.RecommendedDate = DateTime.Today;
    //    taskAllocation.ApprovedBy = "";
    //    taskAllocation.ApprovedDate = "";

    //    taskAllocation._TaskAllocationDetail.Add(new TaskAllocationDetail()
    //    {
    //         TaskTypeId = workType,
    //         TaskDescription = duty,
    //         WorkLocation = place,
    //         Isconmpleated = 0,
    //         NotCompleatedReason = "",
    //         StartTime = value,
    //         EndTime = DateTime.Today,
    //         TaskRemarks = remarks
    //    });

    //    int result = allocation.SaveTaskAllocation(taskAllocation);

    //    if (result == 1)
    //    {
    //        //ShowNotification(new NotificationMessage { Style = "position: absolute; left: -1000px;", Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 40000 });
    //        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully added to the list");
    //        NavigationManager.NavigateTo("https://localhost:44326/addDme21",true);
    //    }
    //    else
    //    {
    //        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Something went wrong");
    //        NavigationManager.NavigateTo("https://localhost:44326/addDme21",true);
    //    }
    //}


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    async void delete(int allocationId, int detailId)
    {
        TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();
        details.DeleteTaskAllocationDetail(allocationId, detailId);
        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Row Deleted");
        NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);
    }

    void retrieve(int id)
    {
        edit = true;
        TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();
        single = details.GetTaskAllocationDetail(id, false, false, false);
    }

    async void update(int allocationId, int detailId)
    {
        //TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();
        //TaskAllocation taskAllocation = new TaskAllocation();

        TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();
        TaskAllocationDetail task = new TaskAllocationDetail();

        task.TaskAllocationDetailId = detailId;
        task.TaskTypeId = workType;
        task.TaskAllocationId = allocationId;
        task.TaskDescription = duty;
        task.WorkLocation = place;
        task.Isconmpleated = 0;
        task.NotCompleatedReason = "";
        task.StartTime = value;
        task.EndTime = DateTime.Today;
        task.TaskRemarks = remarks;
        task.TaskAmendments = amendments;

        int result = details.UpdateTaskAllocationDetail(task);

        if (result == 1)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully updated the list");
            NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Something went wrong");
            NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);
        }
    }


    async void onClick_send()
    {

        TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();
        TaskAllocation taskAllocation = new TaskAllocation();

        foreach (var prop in taskAllocations.Where(u => u.StatusId == 1))
        {
            allocation.UpdateTaskAllocationApproval(prop.TaskAllocationId, 6);
        }

        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Sent to Approval..");
        NavigationManager.NavigateTo("https://localhost:44326/addDme21", true);

    }

    //-------------- Date Picker handler --------------------//

    DateTime value = DateTime.Today;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value = DateTime.Today;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591

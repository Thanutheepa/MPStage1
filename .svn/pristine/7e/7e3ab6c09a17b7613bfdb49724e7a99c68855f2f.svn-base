// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ManPowerWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Domain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\UpdateTarget.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\UpdateTarget.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\UpdateTarget.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/planning/annualTargets/updateTarget/{ProgramId}")]
    public partial class UpdateTarget : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 443 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\UpdateTarget.razor"
       

    string[] year = { "2022", "2023" };
    [Parameter]
    public string ProgramId { get; set; }

    List<Month> monthTable = new List<Month>();

    string[] arrVote = { "328-02-01-02-2509", "428-02-01-02-2509", "528-02-01-02-2509", "628-02-01-02-2509" };

    string[] user;


    private string district;
    private string ds;
    private bool isChecked = false;
    private int selectedDistrict;
    private int selectedDSDivision;
    private int selectedProgramID;
    private string selectedProgram;
    private int selectedDesignation;
    private int selectedOfficer;
    private string OfficerName;
    private int month;
    private string monthName;
    private int depUnitPId;
    private int radioSelection;


    private string selectedYear;
    private int programType;
    private string pInstruct = "";
    private string vote = "";
    private string description = "";

    private string phyCount;
    private string finCount;

    private string output;
    private string outcome;

    private DateTime sDate = DateTime.Now;
    private DateTime eDate = DateTime.Now;

    ProgramTarget programTarget = new ProgramTarget();
    List<ProgramTarget> searchTarget = new List<ProgramTarget>();
    ProgramAssignee programAssignee = new ProgramAssignee();
    List<DepartmentUnit> listDistrict = new List<DepartmentUnit>();
    List<DepartmentUnit> listDSDivision = new List<DepartmentUnit>();
    List<Designation> listDesignation = new List<Designation>();
    List<ProgramType> listProgramType = new List<ProgramType>();
    List<DepartmentUnitPositions> listUser = new List<DepartmentUnitPositions>();
    List<SystemUser> listUsers = new List<SystemUser>();
    List<ManPowerCore.Domain.Program> program = new List<ManPowerCore.Domain.Program>();
    List<ProgramTarget> programTargetsList = new List<ProgramTarget>();
    List<ProgramAssignee> assignees = new List<ProgramAssignee>();



    protected override void OnInitialized()
    {
        base.OnInitialized();

        monthTable.Add(new Month() { monthName = "January", monthNumber = 1 });
        monthTable.Add(new Month() { monthName = "February", monthNumber = 2 });
        monthTable.Add(new Month() { monthName = "March", monthNumber = 3 });
        monthTable.Add(new Month() { monthName = "April", monthNumber = 4 });
        monthTable.Add(new Month() { monthName = "May", monthNumber = 5 });
        monthTable.Add(new Month() { monthName = "June", monthNumber = 6 });
        monthTable.Add(new Month() { monthName = "July", monthNumber = 7 });
        monthTable.Add(new Month() { monthName = "August", monthNumber = 8 });
        monthTable.Add(new Month() { monthName = "September", monthNumber = 9 });
        monthTable.Add(new Month() { monthName = "October", monthNumber = 10 });
        monthTable.Add(new Month() { monthName = "November", monthNumber = 11 });
        monthTable.Add(new Month() { monthName = "December", monthNumber = 12 });

        DepartmentUnitTypeController _DepartmentUnitTypeController = ControllerFactory.CreateDepartmentUnitTypeController();
        listDistrict = _DepartmentUnitTypeController.GetDepartmentUnitType(2, true)._DepartmentUnit;
        listDSDivision = _DepartmentUnitTypeController.GetDepartmentUnitType(3, true)._DepartmentUnit;

        DesignationController designationController = ControllerFactory.CreateDesignationController();
        listDesignation = designationController.GetAllDesignation(true, false);

        SystemUserController systemUserController = ControllerFactory.CreateSystemUserController();
        listUsers = systemUserController.GetAllSystemUser(true, false, false);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        listProgramType = programTypeController.GetAllProgramType(false);

        DepartmentUnitPositionsController unitPositionsController = ControllerFactory.CreateDepartmentUnitPositionsController();
        listUser = unitPositionsController.GetAllDepartmentUnitPositions(false, false, true, false, true);

        ProgramController programController = ControllerFactory.CreateProgramController();
        program = programController.GetAllProgram(false);

        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        programTargetsList = programTargetController.GetAllProgramTarget(true, true, true, true);

        ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();
        assignees = programAssigneeController.GetAllProgramAssignee(true,true,true);

    }

    //----------------------------- validator ------------------------------//

    void OnSubmit(ProgramTarget programTarget)
    {
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(programTarget, new JsonSerializerOptions() { WriteIndented = true })}");
        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();
        ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();

        programTarget.ProgramTypeId = programType;
        programTarget.ProgramId = selectedProgramID;
        programTarget.Title = selectedProgram;
        programTarget.Description = description;
        programTarget.Instractions = pInstruct;
        programTarget.StartDate = sDate;
        programTarget.EndDate = eDate;
        programTarget.VoteNumber = vote;
        programTarget.NoOfProjects = int.Parse(phyCount);
        programTarget.EstimatedAmount = float.Parse(finCount);
        programTarget.TargetYear = int.Parse(selectedYear);
        programTarget.TargetMonth = month;
        programTarget.Output = int.Parse(output);
        programTarget.Outcome = int.Parse(outcome);
        programTarget.IsRecommended = 0;
        programTarget.RecommendedBy = "";
        programTarget.RecommendedDate = DateTime.Now;

        programTarget._ProgramAssignee.Add(new ProgramAssignee()
            {
                DesignationId = selectedDesignation,
                ProgramAssigneeId = selectedOfficer,
                DepartmentUnitPossitionsId = depUnitPId,
            });

        int TargetResponse = programTargetController.SaveProgramTarget(programTarget);
        programTarget = new ProgramTarget();

        if (TargetResponse != 0)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success");
            navigationManager.NavigateTo("https://localhost:44326/planning/annualTargets");
        }
        else
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong", "");
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }


    async void onClick_send()
    {

        ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();

        foreach (var prop in programTargetsList.Where(u => u.IsRecommended == 0 && u.ProgramTargetId == int.Parse(ProgramId)))
        {
            programTargetController.UpdateProgramTargetApproval(prop.ProgramTargetId, 1);
        }

        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Sent to Approval..");

    }

    //-------------- Date Picker hander --------------------//

    DateTime value1 = DateTime.Now;
    DateTime value2 = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value1 = DateTime.Now;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591

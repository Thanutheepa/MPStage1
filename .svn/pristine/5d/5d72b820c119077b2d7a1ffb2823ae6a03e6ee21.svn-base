// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ManPowerWeb.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerWeb.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using CurrieTechnologies.Razor.SweetAlert2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Domain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\_Imports.razor"
using ManPowerCore.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\DME21Update.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\DME21Update.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\DME21Update.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/addDme21/{index}")]
    public partial class DME21Update : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 430 "C:\Users\Hansi\Desktop\New folder (2)\ManPowerWeb\Pages\DME21Update.razor"
       
    [Parameter]
    public string index { get; set; }

    private int workType;
    private int pId;
    private int depId;
    private string pName;
    private string task;
    private string user;
    private string place;
    private string remarks = "";
    private int radioSelection;
    private string duty;
    private string officer;
    private bool isClicked = false;
    private bool dateValidate1 = false;
    private bool dateValidate2 = false;
    private bool edit = false;
    private int count = 0;
    private int id;
    private DateTime yearMonth = DateTime.Today;
    private DateTime created = DateTime.Today;
    private DateTime selectedMonth;

    private string emptyText = "No Items to display!";

    //private List<DME21Model> dme = new List<DME21Model> ();

    List<ManPowerCore.Domain.Program> programObj = new List<ManPowerCore.Domain.Program>();
    List<ProgramType> programTypes = new List<ProgramType>();
    List<TaskType> taskTypes = new List<TaskType>();
    List<TaskAllocationDetail> taskAllocationDetails = new List<TaskAllocationDetail>();
    TaskAllocationDetail single = new TaskAllocationDetail();
    List<TaskAllocation> taskAllocations = new List<TaskAllocation>();
    List<TaskAllocation> approval = new List<TaskAllocation>();
    List<TaskAllocationDetail> myList = new List<TaskAllocationDetail>();
    List<DepartmentUnitPositions> listUser = new List<DepartmentUnitPositions>();
    public SystemUser userRegistationDetailsList;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        DepartmentUnitPositionsController unitPositionsController = ControllerFactory.CreateDepartmentUnitPositionsController();
        listUser = unitPositionsController.GetAllDepartmentUnitPositions(false, false, true, false, true);

        ProgramController programController = ControllerFactory.CreateProgramController();
        programObj = programController.GetAllProgram(true);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        programTypes = programTypeController.GetAllProgramType(false);

        TaskTypeController taskTypeController = ControllerFactory.CreateTaskTypeController();
        taskTypes = taskTypeController.GetAllTaskType(false);

        TaskAllocationDetailController aa = ControllerFactory.CreateTaskAllocationDetailController();
        taskAllocationDetails = aa.GetAllTaskAllocationDetail(false, false, false);

        TaskAllocationController taskAllocationController = ControllerFactory.CreateTaskAllocationController();
        taskAllocations = taskAllocationController.GetAllTaskAllocation(true, true, true, true);

        foreach (var j in taskAllocations.Where(u => u.TaskAllocationId == int.Parse(index)))
        {
            foreach (var i in taskAllocationDetails.Where(u => u.TaskAllocationId == j.TaskAllocationId))
            {
                myList.Add(i);
            }
        }

        userRegistationDetailsList = await sessionStorage.GetItemAsync<SystemUser>("UserDetails");
        user = userRegistationDetailsList.Name;

    }

    //----------------------------- validator ------------------------------
    bool popup;

    TaskAllocation taskAllocation = new TaskAllocation();

    void OnSubmit(TaskAllocation taskAllocation)
    {
        Console.WriteLine($"Submit: {JsonSerializer.Serialize(taskAllocation, new JsonSerializerOptions() { WriteIndented = true })}");

        foreach (var j in taskAllocations.Where(u => u.CreatedUser == user))
        {
            foreach (var i in taskAllocationDetails.Where(u => u.TaskAllocationId == j.TaskAllocationId))
            {
                if (value.Date == i.StartTime.Date && value.Month == j.TaskYearMonth.Month)
                {
                    dateValidate1 = true;
                }
                else if (value.Month < i._TaskAllocation.TaskYearMonth.Month && i._TaskAllocation.StatusId != 1)
                {
                    dateValidate2 = true;
                }
            }
        }

        if (value == null)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please enter a Date");
        }
        else if (value < DateTime.Today || value.Month < DateTime.Today.Month)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please enter valid Date");
        }
        else if (dateValidate1 == true)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Date already exist..Please enter a new Date");
        }
        else if (dateValidate2 == true)
        {
            JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "DME 21 is already submitted for this month");
        }
        else
        {

            TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();

            taskAllocation.DepartmetUnitPossitionsId = depId;
            taskAllocation.TaskYearMonth = value;
            taskAllocation.CreatedDate = created;
            taskAllocation.CreatedUser = userRegistationDetailsList.Name;
            taskAllocation.StatusId = 1;
            taskAllocation.RecommendedBy = "";
            taskAllocation.RecommendedDate = DateTime.Today;
            taskAllocation.ApprovedBy = "";
            taskAllocation.ApprovedDate = "";

            taskAllocation._TaskAllocationDetail.Add(new TaskAllocationDetail()
                {
                    TaskTypeId = workType,
                    TaskDescription = duty,
                    WorkLocation = place,
                    Isconmpleated = 0,
                    NotCompleatedReason = "",
                    StartTime = value,
                    EndTime = DateTime.Today,
                    TaskRemarks = remarks,
                    TaskAmendments = ""
                });

            int result = allocation.SaveTaskAllocation(taskAllocation);

            if (result == 1)
            {
                JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully added to the list");
                NavigationManager.NavigateTo("/addDme21", true);
            }
            else
            {
                JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong");
                NavigationManager.NavigateTo("/addDme21", true);
            }
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    private async Task delete(int allocationId, int detailId)
    {
        TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();

        var confirm = await JSRuntime.InvokeAsync<bool>("customConfirm", "Conformation", "Are you sure you want to delete ?");

        if (confirm)
        {
            details.DeleteTaskAllocationDetail(allocationId, detailId);
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Row Deleted");
            NavigationManager.NavigateTo($"/addDme21/{int.Parse(index)}", true);
        }
    }

    void retrieve(int id)
    {
        edit = true;
        TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();
        single = details.GetTaskAllocationDetail(id, false, false, false);
    }

    async void update(int allocationId, int detailId)
    {
        if (value == null)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please enter a Date");
        }
        else if (value < DateTime.Today || value.Month < DateTime.Today.Month)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please enter valid Date");
        }
        else
        {
            foreach (var i in taskAllocationDetails)
            {
                if (value == i.StartTime)
                {
                    await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Date already exist..Please enter a new Date");
                }
                else if (value.Month < i._TaskAllocation.TaskYearMonth.Month && i._TaskAllocation.StatusId != 1)
                {
                    await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "DME 21 is already submitted for this month");
                }
            }

            TaskAllocationDetailController details = ControllerFactory.CreateTaskAllocationDetailController();
            TaskAllocationDetail task = new TaskAllocationDetail();

            task.TaskAllocationDetailId = detailId;
            task.TaskTypeId = workType;
            task.TaskAllocationId = allocationId;
            task.TaskDescription = duty;
            task.WorkLocation = place;
            task.Isconmpleated = 0;
            task.NotCompleatedReason = "";
            task.StartTime = value;
            task.EndTime = DateTime.Today;
            task.TaskRemarks = remarks;
            task.TaskAmendments = "";

            int result = details.UpdateTaskAllocationDetail(task);

            if (result == 1)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully updated the list");
                NavigationManager.NavigateTo($"/addDme21/{int.Parse(index)}", true);
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Something went wrong");
                NavigationManager.NavigateTo($"/addDme21/{int.Parse(index)}", true);
            }
        }
    }


    async void onClick_send()
    {

        TaskAllocationController allocation = ControllerFactory.CreateTaskAllocationController();
        TaskAllocation taskAllocation = new TaskAllocation();

        foreach (var prop in taskAllocations.Where(u => u.StatusId == 7 && u.TaskAllocationId == int.Parse(index)))
        {
            allocation.UpdateTaskAllocationApproval(prop.TaskAllocationId, 6, officer, "");
        }

        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Sent to Approval..");
        NavigationManager.NavigateTo($"/addDme21/{int.Parse(index)}", true);

    }

    //-------------- Date Picker handler --------------------//

    DateTime value = DateTime.Today;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };

    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value = DateTime.Today;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.LocalStorage.ILocalStorageService LocalStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591

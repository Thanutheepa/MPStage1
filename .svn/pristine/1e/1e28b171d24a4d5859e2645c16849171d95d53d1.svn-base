@page "/addSpecialTarget"
@inject IJSRuntime JSRuntime
@using System.Text.RegularExpressions


<div id="main">
    <div class="primary-container">
        <div class="wizard-heading">Add Special Target</div>

         <RadzenCard>
            <div class="row">
                <div class="col-5" style="margin-right:100px;">
                <label class="label">Year</label>
                     <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Placeholder="" Data="@year" Name="year"
                                SelectedItem="selectedYear" @bind-Value="selectedYear" Style="margin-bottom:10px;font-size:0.9em;" >
                     </RadzenDropDown> <br />


                <label class="label">District</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="margin-bottom:10px;font-size:0.9em;"
                                    Data="@listDistrict" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDistrict">
                    </RadzenDropDown>


                <label class="label">Designation</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@listDesignation" Style="margin-bottom:10px;font-size:0.9em;"
                                ValueProperty="DesignationId"  TextProperty="DesigntionName" @bind-Value="selectedDesignation"/> <br />



                </div>

                <div class="col-5">
                <label class="label">Month</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@monthTable"
                                    ValueProperty="monthNumber" TextProperty="monthName" @bind-Value="month" Style="margin-bottom:10px;font-size:0.9em;" />

                <label class="label">DS Division</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Style="margin-bottom:10px;font-size:0.9em;"
                                    Data="@listDSDivision.Where(u => u.ParentId == selectedDistrict)" ValueProperty="DepartmentUnitId" TextProperty="Name" @bind-Value="selectedDSDivision" /> <br />

                <label class="label">Officer Name</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Data="@listUser.Where(u => u.DepartmentUnitId == selectedDistrict && u._SystemUser.DesignationId == selectedDesignation)"
                                    ValueProperty="SystemUserId" TextProperty="_SystemUser.Name" @bind-Value="selectedOfficer" Placeholder="" /><br /> <br />

                </div>
            </div>
         </RadzenCard>

        @foreach (var prop in listUser.Where(u => u.SystemUserId == selectedDistrict))
        {
            depUnitPId = prop.ParentId;
        }

        <br /><br />

         <RadzenCard>
            <div class="row">
                <div class="col-5" style="margin-right:100px;">

                     <label class="label">Program Type</label>
                     <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@listProgramType"
                                    ValueProperty="ProgramTypeId" TextProperty="ProgramTypeName" @bind-Value="programType" Style="margin-bottom:10px;font-size:0.9em;" />

                    <label class="label">Program</label>
                    <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@program"
                                    ValueProperty="ProgramId" TextProperty="ProgramName" @bind-Value="selectedProgramID" Style="margin-bottom:10px;font-size:0.9em;" />


                    @foreach (var prop in program.Where(u => u.ProgramId == selectedProgramID))
                    {
                        selectedProgram = prop.ProgramName;
                    }

                    <label class="label">Vote</label>
                    <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Placeholder="" Data="@arrVote"
                                    SelectedItem="vote" @bind-Value="vote" Style="margin-bottom:10px;font-size:0.9em;" />

                </div>


                <div class="col-5">
                    @*<RadzenDatePicker @bind-Value="value" Placeholder="End Date.." DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:20px;" />*@

                    <label class="label">Instructions</label>
                    <RadzenTextArea @bind-Value="pInstruct" Class="w-100" Style="margin-bottom:10px;font-size:0.9em;"></RadzenTextArea>

                    <br/>

                    <label class="label">Description</label>
                    <RadzenTextArea @bind-Value="description" Class="w-100" Style="margin-bottom:10px;font-size:0.9em;"></RadzenTextArea>

                    <RadzenDatePicker @bind-Value="sDate" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:10px;" />

                    <RadzenDatePicker @bind-Value="eDate" DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Style="margin-bottom:10px;" />

                </div>
            </div>
         </RadzenCard>

            <br /><br />

            <RadzenCard>
                <div class="row">
                    <div class="col-7">
                        <h5>Quater target: physical / financial : </h5><br />

                        <label class="label">Month</label>
                        <RadzenDropDown AllowClear="true" TValue="int" Class="w-100" Placeholder="" Data="@monthTable"
                                    ValueProperty="monthNumber" TextProperty="monthName" @bind-Value="month" Style="margin-bottom:10px;font-size:0.9em;" />

                        <div class="row">
                            <div class="col-5">
                            <label class="label">Physical Count</label>
                            <input type="text" Placeholder="Ex: 10" @bind="phyCount" Style="margin-bottom:10px;font-size:0.9em;"></input>

                            <label class="label">Financial Count</label>
                            <input type="text" Placeholder="Ex: 100000" @bind="finCount" Style="margin-bottom:10px;font-size:0.9em;"></input>
                        </div>
                        </div>

                        <br />
                        <input type="button" class="primary-btn" value="Add" @onclick="onClick_add" /> &nbsp;&nbsp;

                         <RadzenCheckBox @bind-Value="isChecked"  Name="CheckBox1" TValue="bool"/>
                         <RadzenLabel Text="Show Details" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle;" />
                    </div>
                </div>

                <br/>

            <div class="row">
                @if (isChecked == true)
                {
                        <table class="table primary-table">
                            <thead class="table-active">
                                <tr>
                                    <th scope="col">Month</th>
                                    <th scope="col">Physical Count</th>
                                    <th scope="col">Financial Count</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@month</td>
                                    <td>@phyCount</td>
                                    <td>@finCount</td>
                                    <td>
                                        <a href="/planning/1/updateTarget">
                                            <input type="button" class="primary-btn" value="Delete" style="height:30px;width:100px;font-size:0.9em;" />
                                        </a>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                }
            </div>
            </RadzenCard>

            <br /><br />


            <RadzenCard>
                <div class="row">
                    <div class="col-5">
                        <h5>Expected results : </h5><br />

                        <label class="label">Output</label>
                        <RadzenTextBox  Class="w-100" Placeholder="Output.."  @bind-Value="output" Style="margin-bottom:10px;font-size:0.9em;" />

                        <label class="label">Outcome</label>
                        <RadzenTextBox  Class="w-100" Placeholder="Outcome.." @bind-Value="outcome" Style="margin-bottom:10px;font-size:0.9em;" />
                    </div>
                </div>
            </RadzenCard>
            <br /><br />

        <div class="row">
            <div class="col-5">

                <div class="form-holder form-holder-2">
                    <input type="button" class="primary-btn" value="Save" @onclick=(onClick_Save) />
                </div>
                <br />

                <div class="form-holder form-holder-2">
                        <input type="button" class="primary-btn" value="Send to Recommondation" style="width:250px;" onclick="document.getElementById('id01').style.display='block'" />
                </div>
                <br />

                <div class="form-holder form-holder-2">
                    <input type="button" class="primary-btn" value="Clear"/>
                </div>
                <br />

            </div>
        </div>

        @*---------------- Dialog box -----------------------*@

        <div class="w3-container">

            <div id="id01" class="w3-modal">
                <div class="w3-modal-content w3-card-4 w3-animate-zoom" style="max-width:40%;">

                    <div class="w3-center">
                        <br>
                        <span onclick="document.getElementById('id01').style.display='none'" class="w3-button w3-xlarge w3-display-topright" title="Close Modal">&times;</span>
                        <h2>Recommondation</h2>
                    </div>

                    <form class="w3-container" action="/action_page.php" style="padding:70px">
                        <div class="w3-section" >
                            <label><b>Recommondation Type</b></label>
                            <select class="form-select" aria-label="Default select example" required>
                                <option selected>Open this select menu</option>
                                <option value="1">Send to recommondation</option>
                                <option value="2">Send to approval</option>
                            </select>

                            <br/><br/>

                            <label><b>Officer Name</b></label>
                            <select class="form-select" aria-label="Default select example" required>
                                <option selected>Open this select menu</option>
                                <option value="1">Mr. R Fernando</option>
                                <option value="2">Mrs. A Abhesinghe</option>
                            </select>
                        </div>
                    </form>

                    <div class="w3-container w3-border-top w3-padding-16 w3-light-grey">
                        <div class="row justify-content-evenly">
                            <div class="col-3">
                                <input onclick="document.getElementById('id01').style.display='none'" type="button" class="red-btn" value="Cancel"  style="width:160px;" />
                            </div>
                            <div class="col-3">
                                <input onclick="document.getElementById('id01').style.display='none'" type="button" class="blue-btn" value="Send" style="width:160px;" />
                            </div>
                        </div>
                   </div>

                </div>
            </div>
        </div>

        @*---------------------------------------*@

    </div>
</div>





@code {

    string[] year = { "2022", "2023" };

    List<Month> monthTable = new List<Month>();

    string[] arrVote = { "328-02-01-02-2509", "428-02-01-02-2509", "528-02-01-02-2509", "628-02-01-02-2509" };





    private bool isChecked = false;
    private int selectedDistrict;
    private int selectedDSDivision;
    private int selectedProgramID;
    private string selectedProgram;
    private int selectedDesignation;
    private int selectedOfficer;
    private int month;
    private int depUnitPId;

    private string selectedYear;
    private int programType;
    private string pInstruct = "";
    private string vote = "";
    private string description = "";

    private int phyCount;
    private float finCount;

    private string output;
    private string outcome;

    private DateTime sDate = DateTime.Now;
    private DateTime eDate = DateTime.Now;

    List<DepartmentUnit> listDistrict = new List<DepartmentUnit>();
    List<DepartmentUnit> listDSDivision = new List<DepartmentUnit>();
    List<Designation> listDesignation = new List<Designation>();
    List<ProgramType> listProgramType = new List<ProgramType>();
    List<DepartmentUnitPositions> listUser = new List<DepartmentUnitPositions>();
    List<SystemUser> listUsers = new List<SystemUser>();
    List<ManPowerCore.Domain.Program> program = new List<ManPowerCore.Domain.Program>();


    protected override void OnInitialized()
    {
        base.OnInitialized();

        monthTable.Add(new Month() { monthName = "January", monthNumber = 1 });
        monthTable.Add(new Month() { monthName = "February", monthNumber = 2 });
        monthTable.Add(new Month() { monthName = "March", monthNumber = 3 });
        monthTable.Add(new Month() { monthName = "April", monthNumber = 4 });
        monthTable.Add(new Month() { monthName = "May", monthNumber = 5 });
        monthTable.Add(new Month() { monthName = "June", monthNumber = 6 });
        monthTable.Add(new Month() { monthName = "July", monthNumber = 7 });
        monthTable.Add(new Month() { monthName = "August", monthNumber = 8 });
        monthTable.Add(new Month() { monthName = "September", monthNumber = 9 });
        monthTable.Add(new Month() { monthName = "October", monthNumber = 10 });
        monthTable.Add(new Month() { monthName = "November", monthNumber = 11 });
        monthTable.Add(new Month() { monthName = "December", monthNumber = 12 });

        DepartmentUnitTypeController _DepartmentUnitTypeController = ControllerFactory.CreateDepartmentUnitTypeController();
        listDistrict = _DepartmentUnitTypeController.GetDepartmentUnitType(2, true)._DepartmentUnit;
        listDSDivision = _DepartmentUnitTypeController.GetDepartmentUnitType(3, true)._DepartmentUnit;

        DesignationController designationController = ControllerFactory.CreateDesignationController();
        listDesignation = designationController.GetAllDesignation(true, false);

        SystemUserController systemUserController = ControllerFactory.CreateSystemUserController();
        listUsers = systemUserController.GetAllSystemUser(true, false, false);

        ProgramTypeController programTypeController = ControllerFactory.CreateProgramTypeController();
        listProgramType = programTypeController.GetAllProgramType(false);

        DepartmentUnitPositionsController unitPositionsController = ControllerFactory.CreateDepartmentUnitPositionsController();
        listUser = unitPositionsController.GetAllDepartmentUnitPositions(false, false, true, false, true);

        ProgramController programController = ControllerFactory.CreateProgramController();
        program = programController.GetAllProgram(false);


    }

    private async void onClick_Save()
    {
        if (selectedDSDivision == 0 || selectedDistrict == 0 || selectedDesignation == 0 ||
            selectedYear == string.Empty || selectedYear == null || phyCount == 0 || finCount == 0 ||

            pInstruct == string.Empty || pInstruct == null ||
            vote == string.Empty || vote == null ||
            description == string.Empty || description == null ||

            output == string.Empty || output == null ||
            outcome == string.Empty || outcome == null)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the required data");

        }
        else
        {

            ProgramTarget programTarget = new ProgramTarget();
            ProgramTargetController programTargetController = ControllerFactory.CreateProgramTargetController();

            ProgramAssignee programAssignee = new ProgramAssignee();
            ProgramAssigneeController programAssigneeController = ControllerFactory.CreateProgramAssigneeController();

            programTarget.ProgramTypeId = programType;
            programTarget.ProgramId = selectedProgramID;
            programTarget.Title = selectedProgram;
            programTarget.Description = description;
            programTarget.Instractions = pInstruct;
            programTarget.StartDate = sDate;
            programTarget.EndDate = eDate;
            programTarget.VoteNumber = vote;
            programTarget.NoOfProjects = phyCount;
            programTarget.EstimatedAmount = finCount;
            programTarget.TargetYear = int.Parse(selectedYear);
            programTarget.TargetMonth = month;
            programTarget.Output = int.Parse(output);
            programTarget.Outcome = int.Parse(outcome);
            programTarget.IsRecommended = 0;
            programTarget.RecommendedBy = "";
            programTarget.RecommendedDate = DateTime.Now;

            programTarget._ProgramAssignee.Add(new ProgramAssignee()
                {
                    DesignationId = selectedDesignation,
                    ProgramAssigneeId = selectedOfficer,
                    DepartmentUnitPossitionsId = depUnitPId,
                });

            int TargetResponse = programTargetController.SaveProgramTarget(programTarget);

            if (TargetResponse != 0)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "validate success");
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Something went wrong");
            }
        }
    }


    private async void onClick_add()
    {
        if (
            phyCount == 0 || finCount == 0)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the required data");

        }
        //else if (CountValidate(phyCount, finCount) == false)
        //{
        //    await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please add valid counts for 'Physical and Financial Counts'..");
        //}
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "successfully added");

        }
    }

    //private List<string> add(string quater, string phy, string fin)
    //{
    //    var retList = new List<string>();
    //    retList.Add(quater);
    //    retList.Add(phy);
    //    retList.Add(fin);

    //    return retList;
    //}


    private bool CountValidate(string phyCount, string finCount)
    {
        Regex count = new Regex("[0-9]");
        if (count.IsMatch(phyCount) && count.IsMatch(finCount))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    //private void onClick_clear()
    //{
    //    selectedOfficerName = "";
    //    selectedYear = "";
    //    selectedDesignatin = "";
    //    month = "";

    //    targetCategory = "";
    //    program = "";
    //    pInstruct = "";
    //    vote = "";
    //    description = "";

    //    phyCount = 0;
    //    finCount = 0;

    //    output = "";
    //    outcome = "";
    //}



    //-------------- Date Picker hander --------------------//

    DateTime value1 = DateTime.Now;
    DateTime value2 = DateTime.Now;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        value1 = DateTime.Now;
    }

}
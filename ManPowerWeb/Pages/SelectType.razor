@page "/regNext"

<div id="main">
    <RadzenCard Style="padding-left:50px;">
        <div class="row">
            <div class="wizard-heading">Registration</div>

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Select Type" />
                </div>
                <div class="col-5">
                    <RadzenDropDown style="display: block" TValue="string" Data="@type" Class="w-100" Name="gender" @bind-Value="selectType" />
                </div>
            </div>
            <br />
        </div>
        <br/><br/>

        @if (selectType == "Entrepreneur")
        {
            <h4 style="font-weight:bold;">Developed Entrepreneur / Self employers details</h4><br/>
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Nature of Business" />
                </div>
                <div class="col-5">
                    <RadzenTextArea Class="w-100" Name="nature" @bind-Value="nature" style="display: block" />
                    <RadzenRequiredValidator Component="nature" Text="Business Nature is required" Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Start Date" />
                </div>
                <div class="col-5">
                    <RadzenDatePicker @bind-Value=@startDate DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Name="date" />
                    <RadzenRequiredValidator Component="date" Text="Date is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Average Monthly Income" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="income" @bind-Value="income" style="display: block" />
                    <RadzenRequiredValidator Component="income" Text="Income is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Number of Workers" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="workers" @bind-Value="workers" style="display: block" />
                    <RadzenRequiredValidator Component="workers" Text="Number of Workers is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Market Type" />
                </div>
                <div class="col-5">
                    <RadzenDropDown style="display: block" TValue="string" Data="@mType" Class="w-100" Name="gender" @bind-Value="marketType" />
                </div>
            </div>
            <br /><br/>

            <h4 style="font-weight:bold;">Facilitation for Business Plan Preparation</h4><br/>
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Date" />
                </div>
                <div class="col-5">
                    <RadzenDatePicker @bind-Value=@date DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Name="d" />
                    <RadzenRequiredValidator Component="d" Text="Date is required" Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Bank Loan Arrangement" />
                </div>
                <div class="col-5">
                    <RadzenDropDown style="display: block" TValue="string" Data="@bLoan" Class="w-100" Name="gender" @bind-Value="loan" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Facilitation Type" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="f" @bind-Value="facilitation" style="display: block" />
                    <RadzenRequiredValidator Component="f" Text="Number of Workers is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br /><br/>

            <h4 style="font-weight:bold;">Feedback Form</h4><br/>
            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Date" />
                </div>
                <div class="col-5">
                    <RadzenDatePicker @bind-Value=@date DateFormat="d" Change=@(args => OnChange(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" Name="d" />
                    <RadzenRequiredValidator Component="d" Text="Date is required" Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Average Monthly Income" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="income" @bind-Value="income" style="display: block" />
                    <RadzenRequiredValidator Component="income" Text="Income is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Number of Workers" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="workers" @bind-Value="workers" style="display: block" />
                    <RadzenRequiredValidator Component="workers" Text="Number of Workers is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Business Registration Number" />
                </div>
                <div class="col-5">
                    <RadzenTextBox Class="w-100" Name="reg" @bind-Value="businessReg" style="display: block" />
                    <RadzenRequiredValidator Component="reg" Text="Number of Workers is required" Popup=@popup Style="position: absolute" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-4">
                    <RadzenLabel Text="Remarks" />
                </div>
                <div class="col-5">
                    <RadzenTextArea Class="w-100" Name="remarks" @bind-Value="remarks" style="display: block" />
                    <RadzenRequiredValidator Component="remarks" Text="Business Nature is required" Style="position: absolute" />
                </div>
            </div>
            <br /><br/>

        }

        

        <div class="row">
            <div class="col-2">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Add" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Darker" Style="width:130px;" />
            </div>
            <div class="col-2">
                <a href="/">
                    <RadzenButton Shade="Shade.Darker" Text="Save" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" Style="width:130px;" Click="onClick_Save" />
                </a>
            </div>
        </div>
        <br /><br />
    </RadzenCard>
</div>

@code {

    private string selectType;
    private string businessType;
    private string nature;
    private string income;
    private string workers;
    private string marketType;
    private string loan;
    private string facilitation;
    private string businessReg;
    private string remarks;

    private bool popup;


    string[] type = { "Entrepreneur", "Attendence for Program", "Indevidual Benificiaries" };
    //string[] business = { "Agriculture", "service", "Product" };
    //string[] mType = { "Local", "Foreign", "Both" };
    string[] bLoan = { "Yes", "No" };

    [Parameter]
    public string Value { get; set; }

    List<BusinessType> business = new List<BusinessType>();
    List<MarketType> mType = new List<MarketType>();

    protected override void OnInitialized()
    {
        BusinessTypeController businessTypeController = ControllerFactory.CreateBusinessTypeController();
        business = businessTypeController.GetAllBusinessType();

        MarketTypeController marketTypeController = ControllerFactory.CreateMarketTypeController();
        mType = marketTypeController.GetAllMarketType();
    }

    void onClick_Save()
    {
        //EntrepreneurController entrepreneurctrl = ControllerFactory.CreateEntrepreneurController();
        //Entrepreneur entrepreneur = new Entrepreneur();

        //entrepreneur.MarketTypeId = 1;
        //entrepreneur.BusinessTypeId = 1;
        //entrepreneur.NatureOfBusiness = nature;
        //entrepreneur.BusinessStartDate = DateTime.Today;
        //entrepreneur.AvgMonthlyIncome = income;
        //entrepreneur.NumberOfWorkers = workers;

        //int result = entrepreneurctrl.SaveEntrepreneur(entrepreneur);
    }
    




    //-------------- Date Picker handler --------------------//

    DateTime? startDate = DateTime.Today;
    DateTime? date = DateTime.Today;

    IEnumerable<DateTime> dates = new DateTime[] { DateTime.Today.AddDays(-1), DateTime.Today.AddDays(1) };



    void OnChange(DateTime? value, string name, string format)
    {
    }

    void DateRenderSpecial(DateRenderEventArgs args)
    {
        if (dates.Contains(args.Date))
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || dates.Contains(args.Date);
    }

    void DateRenderNoWeekends(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday || args.Date.DayOfWeek == DayOfWeek.Saturday;
    }

    void OnTodayClick()
    {
        startDate = DateTime.Today;
        date = DateTime.Today;
    }
}
